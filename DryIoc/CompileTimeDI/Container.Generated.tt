// <auto-generated/>
/*
The MIT License (MIT)

Copyright (c) 2016-2023 Maksim Volkau

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import Namespace="System.Linq" #>
<#@ import Namespace="System.Text" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="DryIoc.ImTools" #>
<#@ import Namespace="DryIoc.FastExpressionCompiler.LightExpression" #>
<#@ include File="CompileTimeDI\CompileTimeRegistrations.ttinclude" #>
<#
// todo: @simplify The rules for `WithExpressionGenerationSettingsOnly` are required here because the container with generation rules is not returned by `GenerateResolutionExpressions`
var container = GetContainerWithRegistrations().With(rules => rules.WithExpressionGenerationSettingsOnly());

var result = container.GenerateResolutionExpressions(x => x.SelectMany(r =>
    SpecifyResolutionRoots(r).EmptyIfNull()).Concat(CustomResolutionRoots.EmptyIfNull()));

string TrimUsings(string source)
{
    source = source.Replace("DryIoc.", ""); 
    // todo: @wip remove unnecessary usings that's are System.Collections.Generic for KeyValuePair, etc.
    foreach (var x in NamespaceUsings)
        source = source.Replace(x + ".", "");
    return source;
}

string Code(object x, int lineIndent = 0) =>
    x == null ? "null" :
    x is Expression e ? TrimUsings(e.ToCSharpString(new StringBuilder(), lineIndent).ToString()) :
    x is Request r ? Code(container.GetRequestExpression(r), lineIndent) :
    Code(container.GetConstantExpression(x, x.GetType(), true), lineIndent);

// without `typeof`
string TypeOnlyCode(Type type) => TrimUsings(type.ToCode(printGenericTypeArgs: true));

string GetTypeNameOnly(string typeName) => typeName.Split('`').First().Split('.').Last();

string CommaOptArg(string arg) => arg == "null" ? "" : ", " + arg;

int getServiceBodyLineIdent = 12;

var rootCodes = result.Roots.Select((r, i) =>
    new { ServiceType = r.Key.ServiceType,
          ServiceTypeCode = Code(r.Key.ServiceType),
          ServiceTypeOnlyCode = TypeOnlyCode(r.Key.ServiceType),
          ServiceKeyCode = Code(r.Key.ServiceKey),
          RequiredServiceTypeCode = Code(r.Key.Details.RequiredServiceType),
          ExpressionCode = Code(r.Value.Body, getServiceBodyLineIdent),
          CreateMethodName = "Get_" + GetTypeNameOnly(r.Key.ServiceType.Name) + "_" + i });

var depCodes = result.ResolveDependencies.Select((r, i) =>
    new { ServiceType = Code(r.Key.ServiceType),
          ServiceTypeOnly = TypeOnlyCode(r.Key.ServiceType),
          ServiceKey = Code(r.Key.ServiceKey),
          ServiceKeyObject = r.Key.ServiceKey,
          Expression = Code(r.Value, getServiceBodyLineIdent),
          ExpressionObject = r.Value,
          RequiredServiceType = Code(r.Key.RequiredServiceType),
          PreResolveParent = Code(r.Key.Parent, getServiceBodyLineIdent + 8),
          PreResolveParentObject = r.Key.Parent,
          CreateMethodName = "GetDependency_" + GetTypeNameOnly(r.Key.ServiceType.Name) + "_" + i })
    .ToList();

var includeVariants = container.Rules.VariantGenericTypesInResolvedCollection;
#>
/*
======================================================================================================
The code below is auto-generated at compile-time and changes here will be lost on the next generation.
======================================================================================================
<#  
var errCount = result.Errors.Count;
if (errCount != 0) { #>
There are <#=errCount#> generation ERRORS:

<#
var eNum = 0;
foreach(var e in result.Errors) { #>
<#=++eNum#>. <#=e.Key#>
-  <#=e.Value.Message#>

<#}
}

bool hasNotResolvedDeps = false;
foreach (var dc in depCodes)
    if (dc.ExpressionObject == null)
    {
        if (!hasNotResolvedDeps)
        {
            hasNotResolvedDeps = true;
            WriteLine(@"
WARNINGS: Some dependencies are missing. Register them at runtime or add to the compile-time registrations.
");
        }
        WriteLine("- `{0}` {1}in {2}", 
            dc.ServiceTypeOnly,
            dc.ServiceKeyObject == null ? "" : "with key " + dc.ServiceKey + " ",
            dc.PreResolveParentObject); // todo: @wip remove unnecessary info from the output
    }

if (hasNotResolvedDeps)
    depCodes = depCodes.Where(d => d.ExpressionObject != null).ToList();
#>
--------------------------------------------------------------------------------------------------------
*/

using System;
using System.Collections.Generic;
using System.Threading;
using DryIoc.ImTools;

// Provided by `NamespaceUsings`:
<# foreach (var ns in NamespaceUsings) {#>
using <#=ns#>;
<#}#>

namespace DryIoc
{
    ///<summary>The container provides access to the object graph generated using the DryIoc own tools at compile-time</summary>
    public sealed class CompileTimeContainer : ICompileTimeContainer
    {
        ///<summary>The instance if generated compile-time container.</summary>
        public static readonly CompileTimeContainer Instance = new CompileTimeContainer();

        // todo: @wip tbd
        /// <inheritdoc/>
        public bool IsRegistered(Type serviceType) => false;
        /// <inheritdoc/>
        public bool IsRegistered(Type serviceType, object serviceKey) => false;

        /// <inheritdoc/>
        public bool TryResolve(out object service, IResolverContext r, Type serviceType)
        {
<#
        var index = 0;
        foreach (var root in rootCodes.Where(f => f.ServiceKeyCode == "null"))
        {
            if (index++ > 0) {#>
            else<#}#>

            if (serviceType == <#=root.ServiceTypeCode#>)
            {
                service = <#=root.CreateMethodName#>(r);
                return true;
            }
<#
        }
#>
            service = null;
            return false;
        }

        /// <inheritdoc/>
        public bool TryResolve(out object service, IResolverContext r,
            Type serviceType, object serviceKey, Type requiredServiceType, Request preRequestParent, object[] args)
        {
<#
        index = 0;
        foreach (var rootGroup in rootCodes.Where(x => x.ServiceKeyCode != "null").GroupBy(x => x.ServiceType))
        {
            if (index++ > 0) WriteLine(@"
            else");
#>
            if (serviceType == <#=rootGroup.Key#>)
            {
<#
            var innerIndex = 0;
            foreach (var root in rootGroup)
            {
                if (innerIndex++ > 0) WriteLine(@"
                else");
#>
                if (<#=root.ServiceKeyCode#>.Equals(serviceKey))
                {
                    service = <#=root.CreateMethodName#>(r);
                    return true;
                }
<#
            }
#>
            }
<#
        }
#>
<#
        foreach (var depGroup in depCodes.GroupBy(x => x.ServiceType))
        {
            if (index++ > 0) WriteLine(@"
            else");
#>
            if (serviceType == <#=depGroup.Key#>)
            {
<#
            var innerIndex = 0;
            foreach (var dep in depGroup)
            {
                if (innerIndex++ > 0) WriteLine(@"
                else");
#>
                if (<#=dep.ServiceKeyObject == null ? "serviceKey == null"
                     : dep.ServiceKeyObject is DefaultKey ? "(serviceKey == null || " + dep.ServiceKey + ".Equals(serviceKey))"
                     : dep.ServiceKey + ".Equals(serviceKey)"#> &&
                    requiredServiceType == <#= dep.RequiredServiceType #> &&
                    Equals(preRequestParent, <#= dep.PreResolveParent #>))
                {
                    service = <#=dep.CreateMethodName#>(r);
                    return true;
                }
<#
            }
#>
            }
<#
        }
#>
            service = null;
            return false;
        }

        /// <inheritdoc/>
        public IEnumerable<ResolveManyResult> ResolveMany(IResolverContext _, Type serviceType)
        {
<#
        if (!rootCodes.Any())
        {
#>
            yield break;
<#
        }
        else
        {
            foreach (var rootGroup in rootCodes.GroupBy(x => x.ServiceType))
            {
#>
            if (serviceType == <#=rootGroup.First().ServiceTypeCode#>)
<#
                foreach (var root in rootGroup)
                {
#>
                yield return ResolveManyResult.Of(r => <#=root.CreateMethodName#>(r)<#=CommaOptArg(root.ServiceKeyCode)#><#=CommaOptArg(root.RequiredServiceTypeCode)#>);
<#                }

                if (includeVariants && rootGroup.Key.IsGenericType)
                {
                    var sourceType = rootGroup.Key;
                    var variants = rootCodes
                        .Where(x => x.ServiceType.IsGenericType &&
                            x.ServiceType.GetGenericTypeDefinition() == sourceType.GetGenericTypeDefinition() &&
                            x.ServiceType != sourceType && x.ServiceType.IsAssignableTo(sourceType));
                    foreach (var variant in variants)
                    {
#>
                yield return ResolveManyResult.Of(r => <#=variant.CreateMethodName#>(r)<#=CommaOptArg(variant.ServiceKeyCode)#><#=CommaOptArg(variant.RequiredServiceTypeCode)#>); // covariant thingy
<#
                    }
                }
            }
        }
#>
        }

<#
    foreach (var root in rootCodes)
    {
#>
        internal static <#=root.ServiceTypeOnlyCode#> <#=root.CreateMethodName#>(IResolverContext r) =>
            <#=root.ExpressionCode#>;

<#
    }
#>
<#
    foreach (var dep in depCodes)
    {
#>
        internal static <#=dep.ServiceTypeOnly#> <#=dep.CreateMethodName#>(IResolverContext r) =>
            <#=dep.Expression#>;

<#
    }
#>
    }
}
